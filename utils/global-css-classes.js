import COLORS from './colors';
import DIMENSIONS from './dimensions';

// Note: used via _document, so not a Styled JSX component. It must be set via
// dsihtml because it contains ">".

/* eslint-disable */
const html = {
  __html: /* syntax: css */ `
    /* Typog base */

    @font-face {
      font-display: block;
      font-family: 'Walsheim';
      font-stretch: normal;
      font-style: normal;
      font-weight: 300;
      src:
        url("/static/fonts/walsheim-light.woff2") format("woff2"),
        url("/static/fonts/walsheim-light.woff") format("woff");
    }

    @font-face {
      font-display: block;
      font-family: 'Walsheim';
      font-stretch: normal;
      font-style: normal;
      font-weight: 400;
      src:
        url("/static/fonts/walsheim-regular.woff2") format("woff2"),
        url("/static/fonts/walsheim-regular.woff") format("woff");
    }

    @font-face {
      font-display: block;
      font-family: 'Walsheim';
      font-stretch: normal;
      font-style: normal;
      font-weight: 500;
      src:
        url("/static/fonts/walsheim-medium.woff2") format("woff2"),
        url("/static/fonts/walsheim-medium.woff") format("woff");
    }

    @font-face {
      font-display: block;
      font-family: 'Walsheim';
      font-stretch: normal;
      font-style: normal;
      font-weight: 700;
      src:
        url("/static/fonts/walsheim-bold.woff2") format("woff2"),
        url("/static/fonts/walsheim-bold.woff") format("woff");
    }

    @font-face {
      font-display: block;
      font-family: 'Walsheim';
      font-stretch: condensed;
      font-style: normal;
      font-weight: 700;
      src:
        url("/static/fonts/walsheim-condensed-bold.woff2") format("woff2"),
        url("/static/fonts/walsheim-condensed-bold.woff") format("woff");
    }

    body,
    button,
    input,
    select,
    textarea {
      color: ${ COLORS.GRAY_7}; /* this is our “black” */
      font-family: Walsheim;
      font-feature-settings: "kern" 1, "liga" 1, "ss01" 1, "ss04" 1;
      font-synthesis: style;
      font-weight: 400;
    }

    /*
      Styles for the layout _outside_ the hydrated react tree. This structure is
      generated by next and is awkward to target because it adds some divs
      without class names. There is a Github issue concerning this:

      https://github.com/zeit/next.js/issues/2708

      Once resolved (they did declare the intention to fix) we can update this
      to be simpler and more expressive.
    */

    body {
      font-size: 16px;
      overflow-x: hidden;
      position: relative; /* permit absolute bgs to use full-height */
    }

    body,
    #__next {
      height: 100%;
      min-height: 100vh;
    }

    /* When the error page is rendered, it’s not inside #__next anymore: */

    #__next:empty {
      display: none;
    }

    #__next:empty + #__next-error {
      height: 100%;
      min-height: 100vh;
    }

    /*
      This class is added in services/bootstrap to let us specifically disable
      subpixel antialiasing only under the circumstances where it is both
      harmless and helpful. Disabling subpixel antialiasing for other computers
      is something you need to be really careful and selective about, and is
      usually only appropriate for large, light-on-dark text or text where the
      foreground and background colors don’t have a lot of contrast.
    */

    body.high-density-osx-or-ios {
      -moz-osx-font-smoothing: grayscale;
      -webkit-font-smoothing: antialiased;
    }

    #__next {
      display: flex;
      flex-direction: column;
    }

    #__next > * {
      flex-shrink: 0;
    }

    /*
      If react-root has an only child, there would never be a case where a value
      other than 1 would make sense for growth. (If it has multiple children,
      then it is instead a given that it is an internal responsibility of that
      component to decide what makes sense, as it may vary from case to case.)
    */

    #__next > *:only-child {
      flex-grow: 1;
    }

    /*
      h1...h6 elements have semantics which do not always correspond to styles;
      whenever possible, choose the semantically appropriate h* element and
      include one of these classes, which often will not match numerically. This
      distinction is important for producing a logical document outline for
      accessibility and search engines. One exceptional case is that CMS
      markdown won’t include the classes, so within <ContentfulText>, we do
      target by element selector.
    */

    .Heading--1,
    .Heading--2,
    .Heading--3,
    .Heading--4 {
      font-feature-settings: "kern" 1, "liga" 1, "ss02" 1, "ss04" 1;
      font-weight: 500;
      letter-spacing: ${ DIMENSIONS.HEADING_LETTERSPACING};
      line-height: ${ DIMENSIONS.HEADING_LINE_HEIGHT};
      margin: 1em 0 0.5em 0;
    }

    .Heading--1:first-child,
    .Heading--2:first-child,
    .Heading--3:first-child,
    .Heading--4:first-child {
      margin-top: 0;
    }

    .Heading--1 {
      font-size: ${ DIMENSIONS.FONT_SIZES[4]};
    }

    .Heading--2 {
      font-size: ${ DIMENSIONS.FONT_SIZES[3]};
    }

    .Heading--3 {
      font-size: ${ DIMENSIONS.FONT_SIZES[2]};
    }

    .Heading--4 {
      font-size: ${ DIMENSIONS.FONT_SIZES[1]};
      text-transform: uppercase;
    }

    .Text {
      font-size: ${ DIMENSIONS.FONT_SIZES[1]};
      line-height: ${ DIMENSIONS.BASE_LINE_HEIGHT};
    }

    .Text a:link {
      color: ${ COLORS.BLUE_DARK};
      transition: color linear ${ DIMENSIONS.BASE_MS}ms;
    }

    .Text a:visited {
      color: ${ COLORS.PURPLE_DARK};
    }

    .Text a:hover {
      color: ${ COLORS.SKY_BLUE_DARK};
    }

    .Text a:active {
      color: ${ COLORS.SKY_BLUE_LIGHT};
    }

    .Text p {
      margin: ${ DIMENSIONS.PARAGRAPH_MARGIN} 0;
    }

    /* Special global typographic classes */

    /*
      Use for body text which is all-caps, as in legal documents. Right now this
      is honed for the Soapbox font (Soapbox Terms) but should be adjusted to
      take proper advantage of typographical features in Walsheim that will
      produce superior results.
    */

    .all-uppercase {
      font-size: ${ DIMENSIONS.BODY_ALL_CAPS_SIZE};
      letter-spacing: ${ DIMENSIONS.BODY_ALL_CAPS_LETTERSPACING};
    }

    /* Highlighted cod snippets */

    /*
      The class names for highlighted cod come from highlight.js and aren’t
      component scoped, but they all share common prefixes.
    */

    .hljs-comment {
      color: ${ COLORS.GRAY_4};
      font-weight: 600;
    }

    .hljs-attr {
      color: ${ COLORS.GRAY_5};
    }

    .hljs-built_in {
      color: ${ COLORS.SKY_BLUE_DARK};
    }

    .hljs-class {
      color: ${ COLORS.PINK_DARK};
    }

    .hljs-class .hljs-keyword {
      color: ${ COLORS.PINK_DARK};
      font-style: italic;
    }

    .hljs-function {
      color: ${ COLORS.YELLOW_DARK};
    }

    .hljs-function .hljs-keyword {
      color: ${ COLORS.YELLOW_DARK};
      font-style: italic;
    }

    .hljs-function .hljs-params {
      color: ${ COLORS.PINK_DARK};
    }

    .hljs-keyword {
      color: ${ COLORS.BLUE};
    }

    .hljs-literal,
    .hljs-number {
      color: ${ COLORS.PURPLE_DARK};
      font-weight: 600;
    }

    .hljs-meta {
      color: ${ COLORS.GRAY_4};
    }

    .hljs-regexp {
      color: ${ COLORS.GREEN};
    }

    .hljs-string {
      color: ${ COLORS.GREEN_DARK};
    }

    .hljs-subst {
      background-color: ${ COLORS.GRAY_0};
      border-radius: 2px;
      color: ${ COLORS.GRAY_7};
    }

    .hljs-symbol {
      color: ${ COLORS.BLUE_LIGHT};
    }

    .hljs-tag {
      color: ${ COLORS.YELLOW};
    }

    .hljs-tag .hljs-attr {
      color: ${ COLORS.YELLOW};
      font-weight: 600;
    }

    .hljs-tag .hljs-name {
      color: ${ COLORS.YELLOW_DARK};
      font-weight: 600;
    }

    .hljs-tag .hljs-string {
      color: ${ COLORS.SKY_BLUE_DARK};
    }

    .hljs-title {
      font-weight: 600;
    }
  `
};

const GlobalCSSClasses = () =>
  <style dangerouslySetInnerHTML={html} />;

export default GlobalCSSClasses;
